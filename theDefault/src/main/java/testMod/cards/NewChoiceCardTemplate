package testMod.cards;

import com.megacrit.cardcrawl.actions.AbstractGameAction;
import com.megacrit.cardcrawl.actions.common.ApplyPowerAction;
import com.megacrit.cardcrawl.actions.common.DamageAction;
import com.megacrit.cardcrawl.actions.common.GainBlockAction;
import com.megacrit.cardcrawl.actions.common.MakeTempCardInHandAction;
import com.megacrit.cardcrawl.actions.watcher.ChooseOneAction;
import com.megacrit.cardcrawl.cards.AbstractCard;
import com.megacrit.cardcrawl.cards.DamageInfo;
import com.megacrit.cardcrawl.characters.AbstractPlayer;
import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
import com.megacrit.cardcrawl.monsters.AbstractMonster;
import testMod.DefaultMod;
import testMod.characters.TheDefault;
import testMod.powers.DarkPower;
import testMod.powers.LightPower;

import java.util.ArrayList;
import java.util.Iterator;

import static testMod.DefaultMod.makeCardPath;

public class ${NAME} extends AbstractDynamicCard {
    public static final String ID = DefaultMod.makeID(${NAME}.class.getSimpleName());
    public static final String IMG = makeCardPath("Templates/250x190_Skill.png"); //Default Image

    // STAT DECLARATION
    private static final CardRarity RARITY = CardRarity.COMMON;
    private static final CardTarget TARGET = CardTarget.NONE;
    private static final CardType TYPE = CardType.SKILL;
    public static final CardColor COLOR = TheDefault.Enums.COLOR_GRAY;

    private static final int COST = -2;
    private static final int UPGRADED_COST = -2;
    // /STAT DECLARATION/

    public ${NAME}() {
        super(ID, IMG, COST, TYPE, COLOR, RARITY, TARGET);
        this.purgeOnUse = true;
    }

    public void upgrade() {
        if (!this.upgraded) {
            this.upgradeName();
        }
    }

    public AbstractCard makeCopy() {
        return new ${NAME}();
    }

	// CHOICE CARD FUNCTIONALITY

    public void use(AbstractPlayer p, AbstractMonster m) {
        ArrayList<AbstractCard> stanceChoices = new ArrayList();
        stanceChoices.add(new ${LightPath}());
        stanceChoices.add(new ${DarkPath}());
        if (this.upgraded) {
            Iterator var4 = stanceChoices.iterator();

            while(var4.hasNext()) {
                AbstractCard c = (AbstractCard)var4.next();
                c.upgrade();
            }
        }

        this.addToBot(new ChooseOneAction(stanceChoices));
    }

    // /CHOICE CARD FUNCTIONALITY /
}



class ${LightPath} extends AbstractDynamicCard {

    // TEXT DECLARATION

    public static final String ID = DefaultMod.makeID(${LightPath}.class.getSimpleName());
    public static final String IMG = makeCardPath("Fight.png"); //Default IMG
    // Use if you have a png for this card //public static final String IMG = makeCardPath("${LightPath}.png");

    // /TEXT DECLARATION/


    // STAT DECLARATION

    private static final CardRarity RARITY = CardRarity.SPECIAL;
    private static final CardTarget TARGET = CardTarget.ENEMY;
    private static final CardType TYPE = CardType.ATTACK;
    public static final CardColor COLOR = TheDefault.Enums.COLOR_WHITE;

    private static final int COST = 1;

    //private static final int DAMAGE = 6;
    //private static final int UPGRADE_PLUS_DMG = 3;
    //private static final int BLOCK = 5;
    //private static final int UPGRADE_PLUS_BLOCK = 3;
    //private static final int MAGIC = 1;
    //private static final int UPGRADE_PLUS_MAGIC = 1;



    // /STAT DECLARATION/

    public ${LightPath}() {
        super(ID, IMG, COST, TYPE, COLOR, RARITY, TARGET);
        //damage = baseDamage = DAMAGE;
        //block = baseBlock = BLOCK;
        //magic = baseMagic = MAGIC;
    }

    // Actions the card should do.
    @Override
    public void use(AbstractPlayer p, AbstractMonster m) {
        //AbstractDungeon.actionManager.addToBottom(new DamageAction(m, new DamageInfo(p, damage, damageTypeForTurn), AbstractGameAction.AttackEffect.SLASH_HORIZONTAL));
        //AbstractDungeon.actionManager.addToBottom(new GainBlockAction(p, p, block));
        //AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(m, p, new VulnerablePower(m, this.magicNumber, false), this.magicNumber));
        //AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p, p, new LightPower(p, p, magicNumber), magicNumber));
                                                                                                    //base        //if it's already applied
    }

    // Upgraded stats.
    @Override
    public void upgrade() {
        if (!upgraded) {
            upgradeName();
            //upgradeDamage(UPGRADE_PLUS_DMG);
            //upgradeDamage(UPGRADE_PLUS_BLOCK);
            //upgradeDamage(UPGRADE_PLUS_MAGIC);
            initializeDescription();
        }
    }


    // Choice Functionality //
    //////////////////////////

    // Adds the card to your hand when you select it as your choice
    public void onChoseThisOption() {
        AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player, AbstractDungeon.player,
                new LightPower(AbstractDungeon.player, AbstractDungeon.player, 1), 1));
        AbstractDungeon.actionManager.addToBottom(new MakeTempCardInHandAction(makeCopy(), true));
    }

    public AbstractCard makeCopy() {
        AbstractCard card = new ${LightPath}();
            if(this.upgraded)
                card.upgrade();
        return card;
    }
}



class ${DarkPath} extends AbstractDynamicCard {

    // TEXT DECLARATION

    public static final String ID = DefaultMod.makeID(${DarkPath}.class.getSimpleName());
    public static final String IMG = makeCardPath("Flight.png"); //Default IMG
    // Use if you have a png for this card //public static final String IMG = makeCardPath("${DarkPath}.png");

    // /TEXT DECLARATION/


    // STAT DECLARATION

    private static final CardRarity RARITY = CardRarity.SPECIAL;
    private static final CardTarget TARGET = CardTarget.SELF;
    private static final CardType TYPE = CardType.SKILL;
    public static final CardColor COLOR = TheDefault.Enums.COLOR_BLACK;

    private static final int COST = 1;

    //private static final int DAMAGE = 6;
    //private static final int UPGRADE_PLUS_DMG = 3;
    //private static final int BLOCK = 5;
    //private static final int UPGRADE_PLUS_BLOCK = 3;
    //private static final int MAGIC = 1;
    //private static final int UPGRADE_PLUS_MAGIC = 1;



    // /STAT DECLARATION/

    public ${DarkPath}() {
        super(ID, IMG, COST, TYPE, COLOR, RARITY, TARGET);
        //damage = baseDamage = DAMAGE;
        //block = baseBlock = BLOCK;
        //magic = baseMagic = MAGIC;
    }

    // Actions the card should do.
    @Override
    public void use(AbstractPlayer p, AbstractMonster m) {
        //AbstractDungeon.actionManager.addToBottom(new DamageAction(m, new DamageInfo(p, damage, damageTypeForTurn), AbstractGameAction.AttackEffect.SLASH_HORIZONTAL));
        //AbstractDungeon.actionManager.addToBottom(new GainBlockAction(p, p, block));
        //AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(m, p, new VulnerablePower(m, this.magicNumber, false), this.magicNumber));
        //AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p, p, new LightPower(p, p, magicNumber), magicNumber));
                                                                                                    //base        //if it's already applied
    }

    // Upgraded stats.
    @Override
    public void upgrade() {
        if (!upgraded) {
            upgradeName();
            //upgradeDamage(UPGRADE_PLUS_DMG);
            //upgradeDamage(UPGRADE_PLUS_BLOCK);
            //upgradeDamage(UPGRADE_PLUS_MAGIC);
            initializeDescription();
        }
    }


    // Choice Functionality //
    //////////////////////////

    // Adds the card to your hand when you select it as your choice
    @Override
    public void onChoseThisOption() {
        AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(AbstractDungeon.player, AbstractDungeon.player,
                    new DarkPower(AbstractDungeon.player, AbstractDungeon.player, 1), 1));
        AbstractDungeon.actionManager.addToBottom(new MakeTempCardInHandAction(makeCopy(), true));
    }

    public AbstractCard makeCopy() {
        AbstractCard card =  new ${DarkPath}();
            if(this.upgraded)
                card.upgrade();
        return card;
    }


}

/* localization/card text template, goes in Card-Strings.json

  "testMod:${NAME}": {
    "NAME": "${NAME}",
    "DESCRIPTION": "Choose  [#fae9e8]${LightPath}[] or [#8f918e]${DarkPath}[]."
  },
  "testMod:${LightPath}": {
    "NAME": "${LightPath}",
    "DESCRIPTION": "Deal !D! Damage."
  },
  "testMod:${DarkPath}": {
    "NAME": "${DarkPath}",
    "DESCRIPTION": "Gain !B! Block."
  },
 */